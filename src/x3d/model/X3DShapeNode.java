//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.2.4
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2011.06.16 at 09:21:15 AM EDT
//

package x3d.model;


import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import x3d.fields.BoundingBoxSize;
import x3d.fields.SFVec3f;


/**
 * <p>
 * Java class for X3D ShapeNode complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="X3DShapeNode">
 *   &lt;complexContent>
 *     &lt;extension base="{}X3DChildNode">
 *       &lt;group ref="{}ShapeChildContentModel" minOccurs="0"/>
 *       &lt;attribute name="bboxCenter" type="{}SFVec3f" default="0 0 0" />
 *       &lt;attribute name="bboxSize" type="{}BoundingBoxSize" default="-1 -1 -1" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "X3DShapeNode", propOrder = { "geometry", "appearance",
        "bboxCenter", "bboxSize" })
@XmlSeeAlso({
// ParticleSystem.class,
Shape.class })
public abstract class X3DShapeNode
        extends X3DChildNode
        implements X3DBoundedObject {


    /**
     * The geometry contained in the X3DShapeNode.
     */
    @XmlElementRefs({
            // @XmlElementRef(name = "Rectangle2D", type = Rectangle2D.class,
            // required = false),
            // @XmlElementRef(name = "IndexedQuadSet", type =
            // IndexedQuadSet.class, required = false),
            // @XmlElementRef(name = "NurbsTrimmedSurface", type =
            // NurbsTrimmedSurface.class, required = false),
            // @XmlElementRef(name = "Circle2D", type = Circle2D.class, required
            // = false),
            @XmlElementRef(name = "Cylinder", type = Cylinder.class,
                    required = false),
            @XmlElementRef(name = "Box", type = Box.class, required = false),
            @XmlElementRef(name = "Cone", type = Cone.class, required = false),
            // @XmlElementRef(name = "ArcClose2D", type = ArcClose2D.class,
            // required = false),
            // @XmlElementRef(name = "Arc2D", type = Arc2D.class, required =
            // false),
            @XmlElementRef(name = "Sphere", type = Sphere.class,
                    required = false),
            // @XmlElementRef(name = "NurbsCurve", type = NurbsCurve.class,
            // required = false),
            // @XmlElementRef(name = "Disk2D", type = Disk2D.class, required =
            // false),
            // @XmlElementRef(name = "TriangleStripSet", type =
            // TriangleStripSet.class, required = false),
            // @XmlElementRef(name = "Extrusion", type = Extrusion.class,
            // required = false),
            // @XmlElementRef(name = "NurbsSwungSurface", type =
            // NurbsSwungSurface.class, required = false),
            // @XmlElementRef(name = "LineSet", type = LineSet.class, required =
            // false),
            // @XmlElementRef(name = "PointSet", type = PointSet.class, required
            // = false),
            @XmlElementRef(name = "Text", type = Text.class, required = false) // ,
    // @XmlElementRef(name = "TriangleFanSet", type = TriangleFanSet.class,
    // required = false),
    // @XmlElementRef(name = "IndexedTriangleFanSet", type =
    // IndexedTriangleFanSet.class, required = false),
    // @XmlElementRef(name = "IndexedLineSet", type = IndexedLineSet.class,
    // required = false),
    // @XmlElementRef(name = "NurbsSweptSurface", type =
    // NurbsSweptSurface.class, required = false),
    // @XmlElementRef(name = "Polyline2D", type = Polyline2D.class, required =
    // false),
    // @XmlElementRef(name = "IndexedTriangleStripSet", type =
    // IndexedTriangleStripSet.class, required = false),
    // @XmlElementRef(name = "TriangleSet", type = TriangleSet.class, required =
    // false),
    // @XmlElementRef(name = "NurbsPatchSurface", type =
    // NurbsPatchSurface.class, required = false),
    // @XmlElementRef(name = "Polypoint2D", type = Polypoint2D.class, required =
    // false),
    // @XmlElementRef(name = "ElevationGrid", type = ElevationGrid.class,
    // required = false),
    // @XmlElementRef(name = "NurbsCurve2D", type = NurbsCurve2D.class, required
    // = false),
    // @XmlElementRef(name = "QuadSet", type = QuadSet.class, required = false),
    // @XmlElementRef(name = "ProtoInstance", type = ProtoInstance.class,
    // required = false),
    // @XmlElementRef(name = "TriangleSet2D", type = TriangleSet2D.class,
    // required = false),
    // @XmlElementRef(name = "IndexedFaceSet", type = IndexedFaceSet.class,
    // required = false),
    // @XmlElementRef(name = "GeoElevationGrid", type = GeoElevationGrid.class,
    // required = false),
    // @XmlElementRef(name = "IndexedTriangleSet", type =
    // IndexedTriangleSet.class, required = false)
    })
    protected X3DGeometryNode   geometry;

    /**
     * The appearance of the X3DShapeNode.
     */
    @XmlElementRefs({ @XmlElementRef(name = "Appearance",
            type = Appearance.class, required = false) })
    protected X3DAppearanceNode appearance;

    /**
     * Specifies the bounding box center of the X3DShapeNode.
     */
    @XmlAttribute(name = "bboxCenter")
    protected SFVec3f           bboxCenter;

    /**
     * Specifies the bounding box size of the X3DShapeNode.
     */
    @XmlAttribute(name = "bboxSize")
    protected BoundingBoxSize   bboxSize;

    /**
     * Gets the value of the geometry property.
     * 
     * @return possible object is {@link X3DGeometryNode }
     * 
     */
    public X3DGeometryNode getGeometry() {

        return this.geometry;
    }

    /**
     * Sets the value of the geometry property.
     * 
     * @param geometry
     */
    public void setGeometry(X3DGeometryNode geometry) {

        this.geometry = geometry;
    }

    /**
     * Gets the value of the appearance property.
     * 
     * @return possible object is {@link X3DAppearanceNode }
     * 
     */
    public X3DAppearanceNode getAppearance() {

        return this.appearance;
    }

    /**
     * Sets the value of the appearance property.
     * 
     * @param value
     *            allowed object is {@link X3DAppearanceNode }
     * 
     */
    public void setAppearance(X3DAppearanceNode value) {

        this.appearance = value;
    }

    /**
     * Gets the value of the bboxCenter property.
     * 
     * @return possible object is {@link SFVec3f }
     * 
     */
    @Override
    public SFVec3f getBboxCenter() {

        if (bboxCenter == null) {
            this.bboxCenter = new SFVec3f();
        }
        return bboxCenter;
    }

    /**
     * Sets the value of the bboxCenter property.
     * 
     * @param value
     *            allowed object is {@link SFVec3f }
     * 
     */
    @Override
    public void setBboxCenter(SFVec3f value) {

        this.bboxCenter = value;
    }

    /**
     * Gets the value of the bboxSize property.
     * 
     * @return possible object is {@link BoundingBoxSize }
     * 
     */
    @Override
    public BoundingBoxSize getBboxSize() {

        if (this.bboxSize == null) {
            this.bboxSize = new BoundingBoxSize(-1.0f, -1.0f, -1.0f);
        }
        return bboxSize;
    }

    /**
     * Sets the value of the bboxSize property.
     * 
     * @param value
     *            allowed object is {@link BoundingBoxSize }
     * 
     */
    @Override
    public void setBboxSize(BoundingBoxSize value) {

        this.bboxSize = value;
    }


    /**
     * Creates an empty X3DShapeNode.
     */
    public X3DShapeNode() {

        this(null, null);
    }

    /**
     * Creates an X3DShapeNode with the provided geometry and appearance.
     * 
     * @param geometry
     *            the geometry.
     * @param appearance
     *            the appearance.
     */
    public X3DShapeNode(X3DGeometryNode geometry, X3DAppearanceNode appearance) {

        this.geometry = geometry;
        this.appearance = appearance;
    }


}

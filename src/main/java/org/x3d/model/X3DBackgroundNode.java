//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.06.16 at 09:21:15 AM EDT 
//


package org.x3d.model;

/*
 * _
 * The Open Semantic Network Analysis Platform (OSNAP)
 * _
 * Copyright (C) 2012 - 2014 Visionarium at Virginia Tech
 * _
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * _
 */

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import org.x3d.fields.MFColor;
import org.x3d.fields.MFFloat;
import org.x3d.fields.SFColor;
import org.x3d.fields.SFFloat;

/**
 * <p>Java class for X3DBackgroundNode complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="X3DBackgroundNode">
 *   &lt;complexContent>
 *     &lt;extension base="{}X3DBindableNode">
 *       &lt;attribute name="groundAngle" type="{}MFFloat" />
 *       &lt;attribute name="groundColor" type="{}MFColor" />
 *       &lt;attribute name="skyAngle" type="{}MFFloat" />
 *       &lt;attribute name="skyColor" type="{}MFColor" default="0 0 0" />
 *       &lt;attribute name="transparency" type="{}SFFloat" default="0" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "X3DBackgroundNode")
@XmlSeeAlso({
    //TextureBackground.class,
    Background.class
})
public abstract class X3DBackgroundNode
    extends X3DBindableNode
{

    @XmlAttribute(name = "groundAngle")
    protected MFFloat groundAngle;
    @XmlAttribute(name = "groundColor")
    protected MFColor groundColor;
    @XmlAttribute(name = "skyAngle")
    protected MFFloat skyAngle;
    @XmlAttribute(name = "skyColor")
    protected MFColor skyColor;
    @XmlAttribute(name = "transparency")
    protected SFFloat transparency;

    /**
     * Gets the value of the groundAngle property.
     * 
     * @return
     *     possible object is
     *     {@link MFFloat }
     *     
     */
    public MFFloat getGroundAngle() {
        if (groundAngle == null) {
            groundAngle = new MFFloat();
        }
        return groundAngle;
    }

    /**
     * Sets the value of the groundAngle property.
     * 
     * @param value
     *     allowed object is
     *     {@link MFFloat }
     *     
     */
    public void setGroundAngle(MFFloat value) {
        this.groundAngle = value;
    }

    /**
     * Gets the value of the groundColor property.
     * 
     * @return
     *     possible object is
     *     {@link MFColor }
     *     
     */
    public MFColor getGroundColor() {
        if (groundColor == null) {
            groundColor = new MFColor();            
        }         
        return groundColor;
    }

    /**
     * Sets the value of the groundColor property.
     * 
     * @param value
     *     allowed object is
     *     {@link MFColor }
     *     
     */
    public void setGroundColor(MFColor value) {
        this.groundColor = value;
    }

    /**
     * Gets the value of the skyAngle property.
     * 
     * @return
     *     possible object is
     *     {@link MFFloat }
     *     
     */
    public MFFloat getSkyAngle() {
        if (skyAngle == null) {
            skyAngle = new MFFloat();
        }
        return skyAngle;
    }

    /**
     * Sets the value of the skyAngle property.
     * 
     * @param value
     *     allowed object is
     *     {@link MFFloat }
     *     
     */
    public void setSkyAngle(MFFloat value) {
        this.skyAngle = value;
    }

    /**
     * Gets the value of the skyColor property.
     * 
     * @return
     *     possible object is
     *     {@link MFColor }
     *     
     */
    public MFColor getSkyColor() {
        if (skyColor == null) {
            skyColor = new MFColor();
            skyColor.add(new SFColor());
            
        } 
        return skyColor;
    }

    /**
     * Sets the value of the skyColor property.
     * 
     * @param value
     *     allowed object is
     *     {@link MFColor }
     *     
     */
    public void setSkyColor(MFColor value) {
        this.skyColor = value;
    }

    /**
     * Gets the value of the transparency property.
     * 
     * @return
     *     possible object is
     *     {@link SFFloat }
     *     
     */
    public SFFloat getTransparency() {
        if (transparency == null) {
            transparency = new SFFloat();
        }
        return transparency;
    }

    /**
     * Sets the value of the transparency property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFFloat }
     *     
     */
    public void setTransparency(SFFloat value) {
        this.transparency = value;
    }

}

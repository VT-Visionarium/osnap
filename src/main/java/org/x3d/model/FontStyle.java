//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.06.16 at 09:21:15 AM EDT 
//


package org.x3d.model;

/*
 * _
 * The Open Semantic Network Analysis Platform (OSNAP)
 * _
 * Copyright (C) 2012 - 2014 Visionarium at Virginia Tech
 * _
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * _
 */

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import org.x3d.fields.MFString;
import org.x3d.fields.SFBool;
import org.x3d.fields.SFFloat;
import org.x3d.fields.SFString;

/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;extension base="{}X3DFontStyleNode">
 *       &lt;attribute name="family" type="{}MFString" default=""SERIF"" />
 *       &lt;attribute name="horizontal" type="{}SFBool" default="true" />
 *       &lt;attribute name="justify" type="{}MFString" default=""BEGIN"" />
 *       &lt;attribute name="language" type="{}SFString" />
 *       &lt;attribute name="leftToRight" type="{}SFBool" default="true" />
 *       &lt;attribute name="size" type="{}SFFloat" default="1.0" />
 *       &lt;attribute name="spacing" type="{}SFFloat" default="1.0" />
 *       &lt;attribute name="style" type="{}fontStyleValues" default="PLAIN" />
 *       &lt;attribute name="topToBottom" type="{}SFBool" default="true" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
@XmlRootElement(name = "FontStyle")
public class FontStyle
    extends X3DFontStyleNode
{

    @XmlAttribute(name = "family")
    protected MFString family;
    @XmlAttribute(name = "horizontal")
    protected SFBool horizontal;
    @XmlAttribute(name = "justify")
    protected MFString justify;
    @XmlAttribute(name = "language")
    protected SFString language;
    @XmlAttribute(name = "leftToRight")
    protected SFBool leftToRight;
    @XmlAttribute(name = "size")
    protected SFFloat size;
    @XmlAttribute(name = "spacing")
    protected SFFloat spacing;
    @XmlAttribute(name = "style")
    protected FontStyleValues style;
    @XmlAttribute(name = "topToBottom")
    protected SFBool topToBottom;

    /**
     * Gets the value of the family property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the family property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFamily().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(scale) are allowed in the list
     * {@link MFString }
     * 
     * 
     */
    public MFString getFamily() {
        return this.family;
    }

    /**
     * Gets the value of the horizontal property.
     * 
     * @return
     *     possible object is
     *     {@link SFBool }
     *     
     */
    public SFBool isHorizontal() {

        return horizontal;
    }

    /**
     * Sets the value of the horizontal property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFBool }
     *     
     */
    public void setHorizontal(SFBool value) {
        this.horizontal = value;
    }

    /**
     * Gets the value of the justify property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the justify property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getJustify().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(scale) are allowed in the list
     * {@link MFString }
     * 
     * 
     */
    public MFString getJustify() {
        return this.justify;
    }

    /**
     * Gets the value of the language property.
     * 
     * @return
     *     possible object is
     *     {@link SFString }
     *     
     */
    public SFString getLanguage() {
        return language;
    }

    /**
     * Sets the value of the language property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFString }
     *     
     */
    public void setLanguage(SFString value) {
        this.language = value;
    }

    /**
     * Gets the value of the leftToRight property.
     * 
     * @return
     *     possible object is
     *     {@link SFBool }
     *     
     */
    public SFBool isLeftToRight() {
        return leftToRight;
    }

    /**
     * Sets the value of the leftToRight property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFBool }
     *     
     */
    public void setLeftToRight(SFBool value) {
        this.leftToRight = value;
    }

    /**
     * Gets the value of the size property.
     * 
     * @return
     *     possible object is
     *     {@link SFFloat }
     *     
     */
    public SFFloat getSize() {
        return size;
    }

    /**
     * Sets the value of the size property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFFloat }
     *     
     */
    public void setSize(SFFloat value) {
        this.size = value;
    }

    /**
     * Gets the value of the spacing property.
     * 
     * @return
     *     possible object is
     *     {@link SFFloat }
     *     
     */
    public SFFloat getSpacing() {
        return spacing;
    }

    /**
     * Sets the value of the spacing property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFFloat }
     *     
     */
    public void setSpacing(SFFloat value) {
        this.spacing = value;
    }

    /**
     * Gets the value of the style property.
     * 
     * @return
     *     possible object is
     *     {@link FontStyleValues }
     *     
     */
    public FontStyleValues getStyle() {
        if (style == null) {
            return FontStyleValues.PLAIN;
        } else {
            return style;
        }
    }

    /**
     * Sets the value of the style property.
     * 
     * @param value
     *     allowed object is
     *     {@link FontStyleValues }
     *     
     */
    public void setStyle(FontStyleValues value) {
        this.style = value;
    }

    /**
     * Gets the value of the topToBottom property.
     * 
     * @return
     *     possible object is
     *     {@link SFBool }
     *     
     */
    public SFBool isTopToBottom() {
        return topToBottom;
    }

    /**
     * Sets the value of the topToBottom property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFBool }
     *     
     */
    public void setTopToBottom(SFBool value) {
        this.topToBottom = value;
    }

    public FontStyle () {
        this.family = new MFString();
        this.family.getValue().add(new SFString("SERIF"));
        this.horizontal = new SFBool(true);
        this.justify = new MFString ();
        this.justify.getValue().add(new SFString("BEGIN"));
        this.language = new SFString();
        this.leftToRight = new SFBool(true);
        this.size = new SFFloat (1.0f);
        this.spacing = new SFFloat (1.0f);
        this.style = FontStyleValues.PLAIN;
        this.topToBottom = new SFBool(true);
    }

}

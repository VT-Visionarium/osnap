//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.06.16 at 09:21:15 AM EDT 
//


package org.x3d.model;

/*
 * _
 * The Open Semantic Network Analysis Platform (OSNAP)
 * _
 * Copyright (C) 2012 - 2014 Visionarium at Virginia Tech
 * _
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * _
 */

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import org.x3d.fields.SFBool;
import org.x3d.fields.SFColor;
import org.x3d.fields.SFFloat;

/**
 * <p>Java class for X3DLightNode complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="X3DLightNode">
 *   &lt;complexContent>
 *     &lt;extension base="{}X3DChildNode">
 *       &lt;attribute name="ambientIntensity" default="0">
 *         &lt;simpleType>
 *           &lt;restriction base="{}SFFloat">
 *             &lt;minInclusive value="0"/>
 *             &lt;maxInclusive value="1"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="color" type="{}SFColor" default="1 1 1" />
 *       &lt;attribute name="intensity" default="1">
 *         &lt;simpleType>
 *           &lt;restriction base="{}SFFloat">
 *             &lt;minInclusive value="0"/>
 *             &lt;maxInclusive value="1"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *       &lt;attribute name="on" type="{}SFBool" default="true" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "X3DLightNode")
@XmlSeeAlso({
    SpotLight.class,
    PointLight.class,
    DirectionalLight.class
})
public abstract class X3DLightNode
    extends X3DChildNode
{

    @XmlAttribute(name = "ambientIntensity")
    protected SFFloat ambientIntensity;
    @XmlAttribute(name = "color")
    protected SFColor color;
    @XmlAttribute(name = "intensity")
    protected SFFloat intensity;
    @XmlAttribute(name = "on")
    protected SFBool on;

    /**
     * Gets the value of the ambientIntensity property.
     * 
     * @return
     *     possible object is
     *     {@link SFFloat }
     *     
     */
    public SFFloat getAmbientIntensity() {
        return ambientIntensity;
    }

    /**
     * Sets the value of the ambientIntensity property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFFloat }
     *     
     */
    public void setAmbientIntensity(SFFloat value) {
        if (value.getValue() < 0.0f || value.getValue() > 1.0f){
            throw new IllegalArgumentException("Ambient intensity needs to be between 0 and 1!");
        }
        this.ambientIntensity = value;
    }

    /**
     * Gets the value of the color property.
     * 
     * @return
     *     possible object is
     *     {@link SFColor }
     *     
     */
    public SFColor getColor() {
        return color;
    }

    /**
     * Sets the value of the color property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFColor }
     *     
     */
    public void setColor(SFColor value) {
        this.color = value;
    }

    /**
     * Gets the value of the intensity property.
     * 
     * @return
     *     possible object is
     *     {@link SFFloat }
     *     
     */
    public SFFloat getIntensity() {
        return intensity;
    }

    /**
     * Sets the value of the intensity property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFFloat }
     *     
     */
    public void setIntensity(SFFloat value) {
        if (value.getValue() < 0.0f || value.getValue() > 1.0f){
            throw new IllegalArgumentException("Intensity needs to be between 0 and 1!");
        }
        this.intensity = value;
    }

    /**
     * Gets the value of the on property.
     * 
     * @return
     *     possible object is
     *     {@link SFBool }
     *     
     */
    public SFBool isOn() {
        return on;
    }

    /**
     * Sets the value of the on property.
     * 
     * @param value
     *     allowed object is
     *     {@link SFBool }
     *     
     */
    public void setOn(SFBool value) {
        this.on = value;
    }

    public X3DLightNode () {
        this.ambientIntensity = new SFFloat (0.0f);
        this.color = new SFColor (1.0f, 1.0f, 1.0f);
        this.intensity = new SFFloat (1.0f);
        this.on = new SFBool (true);
    }

}

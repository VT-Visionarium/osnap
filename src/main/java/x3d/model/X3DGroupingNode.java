//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.2.4
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2011.06.16 at 09:21:15 AM EDT
//


package x3d.model;


import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import x3d.fields.SFVec3f;
import x3d.fields.BoundingBoxSize;


/**
 * <p>
 * Java class for X3DGroupingNode complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="X3DGroupingNode">
 *   &lt;complexContent>
 *     &lt;extension base="{}X3DChildNode">
 *       &lt;sequence maxOccurs="unbounded" minOccurs="0">
 *         &lt;group ref="{}ChildContentModel" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;group ref="{}ChildContentModelSceneGraphStructure" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="bboxCenter" type="{}SFVec3f" default="0 0 0" />
 *       &lt;attribute name="bboxSize" type="{}BoundingBoxSize" default="-1 -1 -1" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "X3DGroupingNode", propOrder = { "childObjects" })
@XmlSeeAlso({ X3DViewportNode.class, ScreenGroup.class, Viewport.class,
// PickableGroup.class,
        Group.class,
        // HAnimSite.class,
        // HAnimSegment.class,
        // HAnimJoint.class,
        // GeoTransform.class,
        // GeoLOD.class,
        // GeoLocation.class,
        // TransmitterPdu.class,
        // SignalPdu.class,
        // ReceiverPdu.class,
        // EspduTransform.class,
        // CADLayer.class,
        // CADPart.class,
        // CADAssembly.class,
        StaticGroup.class, LOD.class,
        // Collision.class,
        Billboard.class, Switch.class, Anchor.class, Transform.class })
public abstract class X3DGroupingNode
        extends X3DChildNode
        implements X3DBoundedObject {

    @XmlElements({
            @XmlElement(name = "Appearance", type = Appearance.class),
            @XmlElement(name = "Background", type = Background.class),
            // @XmlElement(name = "ColorInterpolator", type =
            // ColorInterpolator.class),
            // @XmlElement(name = "CoordinateInterpolator", type =
            // CoordinateInterpolator.class),
            @XmlElement(name = "DirectionalLight",
                    type = DirectionalLight.class),
            @XmlElement(name = "Group", type = Group.class),
            @XmlElement(name = "NavigationInfo", type = NavigationInfo.class),
            // @XmlElement(name = "NormalInterpolator", type =
            // NormalInterpolator.class),
            // @XmlElement(name = "OrientationInterpolator", type =
            // OrientationInterpolator.class),
            // @XmlElement(name = "PositionInterpolator", type =
            // PositionInterpolator.class),
            // @XmlElement(name = "ScalarInterpolator", type =
            // ScalarInterpolator.class),
            @XmlElement(name = "Shape", type = Shape.class),
            // @XmlElement(name = "TimeSensor", type = TimeSensor.class),
            @XmlElement(name = "Transform", type = Transform.class),
            @XmlElement(name = "Viewpoint", type = Viewpoint.class),
            @XmlElement(name = "WorldInfo", type = WorldInfo.class),
            @XmlElement(name = "Anchor", type = Anchor.class),
            @XmlElement(name = "BooleanFilter", type = BooleanFilter.class),
            // @XmlElement(name = "BooleanSequencer", type =
            // BooleanSequencer.class),
            @XmlElement(name = "BooleanToggle", type = BooleanToggle.class),
            @XmlElement(name = "BooleanTrigger", type = BooleanTrigger.class),
            // @XmlElement(name = "CylinderSensor", type =
            // CylinderSensor.class),
            // @XmlElement(name = "Inline", type = Inline.class),
            // @XmlElement(name = "IntegerSequencer", type =
            // IntegerSequencer.class),
            @XmlElement(name = "IntegerTrigger", type = IntegerTrigger.class),
            @XmlElement(name = "KeySensor", type = KeySensor.class),
            // @XmlElement(name = "PlaneSensor", type = PlaneSensor.class),
            @XmlElement(name = "PointLight", type = PointLight.class),
            // @XmlElement(name = "ProximitySensor", type =
            // ProximitySensor.class),
            // @XmlElement(name = "SphereSensor", type = SphereSensor.class),
            @XmlElement(name = "SpotLight", type = SpotLight.class),
            @XmlElement(name = "StringSensor", type = StringSensor.class),
            @XmlElement(name = "Switch", type = Switch.class),
            // @XmlElement(name = "TimeTrigger", type = TimeTrigger.class),
            @XmlElement(name = "TouchSensor", type = TouchSensor.class),
            // @XmlElement(name = "AudioClip", type = AudioClip.class),
            @XmlElement(name = "Billboard", type = Billboard.class),
            // @XmlElement(name = "Collision", type = Collision.class),
            // @XmlElement(name = "Fog", type = Fog.class),
            // @XmlElement(name = "LoadSensor", type = LoadSensor.class),
            // @XmlElement(name = "LocalFog", type = LocalFog.class),
            @XmlElement(name = "LOD", type = LOD.class),
            @XmlElement(name = "Script", type = Script.class),
            // @XmlElement(name = "Sound", type = Sound.class),
            // @XmlElement(name = "VisibilitySensor", type =
            // VisibilitySensor.class),
            // @XmlElement(name = "CoordinateInterpolator2D", type =
            // CoordinateInterpolator2D.class),
            // @XmlElement(name = "PositionInterpolator2D", type =
            // PositionInterpolator2D.class),
            @XmlElement(name = "StaticGroup", type = StaticGroup.class),
            // @XmlElement(name = "CADAssembly", type = CADAssembly.class),
            // @XmlElement(name = "CADLayer", type = CADLayer.class),
            @XmlElement(name = "OrthoViewpoint", type = OrthoViewpoint.class),
            // @XmlElement(name = "ViewpointGroup", type =
            // ViewpointGroup.class),
            // @XmlElement(name = "ColorDamper", type = ColorDamper.class),
            // @XmlElement(name = "CoordinateDamper", type =
            // CoordinateDamper.class),
            // @XmlElement(name = "OrientationChaser", type =
            // OrientationChaser.class),
            // @XmlElement(name = "OrientationDamper", type =
            // OrientationDamper.class),
            // @XmlElement(name = "PositionChaser", type =
            // PositionChaser.class),
            // @XmlElement(name = "PositionChaser2D", type =
            // PositionChaser2D.class),
            // @XmlElement(name = "PositionDamper", type =
            // PositionDamper.class),
            // @XmlElement(name = "PositionDamper2D", type =
            // PositionDamper2D.class),
            // @XmlElement(name = "ScalarChaser", type = ScalarChaser.class),
            // @XmlElement(name = "TexCoordDamper2D", type =
            // TexCoordDamper2D.class),
            // @XmlElement(name = "TextureBackground", type =
            // TextureBackground.class),
            // @XmlElement(name = "CollidableShape", type =
            // CollidableShape.class),
            // @XmlElement(name = "CollisionSensor", type =
            // CollisionSensor.class),
            // @XmlElement(name = "RigidBodyCollection", type =
            // RigidBodyCollection.class),
            // @XmlElement(name = "EspduTransform", type =
            // EspduTransform.class),
            // @XmlElement(name = "ReceiverPdu", type = ReceiverPdu.class),
            // @XmlElement(name = "SignalPdu", type = SignalPdu.class),
            // @XmlElement(name = "TransmitterPdu", type =
            // TransmitterPdu.class),
            // @XmlElement(name = "DISEntityManager", type =
            // DISEntityManager.class),
            // @XmlElement(name = "GeoLocation", type = GeoLocation.class),
            // @XmlElement(name = "GeoLOD", type = GeoLOD.class),
            // @XmlElement(name = "GeoMetadata", type = GeoMetadata.class),
            // @XmlElement(name = "GeoOrigin", type = GeoOrigin.class),
            // @XmlElement(name = "GeoPositionInterpolator", type =
            // GeoPositionInterpolator.class),
            // @XmlElement(name = "GeoProximitySensor", type =
            // GeoProximitySensor.class),
            // @XmlElement(name = "GeoTouchSensor", type =
            // GeoTouchSensor.class),
            // @XmlElement(name = "GeoViewpoint", type = GeoViewpoint.class),
            // @XmlElement(name = "GeoTransform", type = GeoTransform.class),
            // @XmlElement(name = "HAnimHumanoid", type = HAnimHumanoid.class),
            // @XmlElement(name = "HAnimJoint", type = HAnimJoint.class),
            // @XmlElement(name = "HAnimSegment", type = HAnimSegment.class),
            // @XmlElement(name = "HAnimSite", type = HAnimSite.class),
            // @XmlElement(name = "NurbsOrientationInterpolator", type =
            // NurbsOrientationInterpolator.class),
            // @XmlElement(name = "NurbsPositionInterpolator", type =
            // NurbsPositionInterpolator.class),
            // @XmlElement(name = "NurbsSurfaceInterpolator", type =
            // NurbsSurfaceInterpolator.class),
            // @XmlElement(name = "NurbsSet", type = NurbsSet.class),
            // @XmlElement(name = "ProtoInstance", type = ProtoInstance.class),
            @XmlElement(name = "ROUTE", type = ROUTE.class) // ,
    // @XmlElement(name = "ExternProtoDeclare", type =
    // ExternProtoDeclare.class),
    // @XmlElement(name = "ProtoDeclare", type = ProtoDeclare.class),
    // @XmlElement(name = "IMPORT", type = IMPORT.class),
    // @XmlElement(name = "EXPORT", type = EXPORT.class)
    })
    private List<X3DNode>   childObjects;


    @XmlAttribute(name = "bboxCenter")
    private SFVec3f         bboxCenter;
    @XmlAttribute(name = "bboxSize")
    private BoundingBoxSize bboxSize;

    /**
     * Gets the value of the appearanceOrBackgroundOrColorInterpolator property.
     * 
     * <p>
     * This accessor method returns a reference to the live list, not a
     * snapshot. Therefore any modification you make to the returned list will
     * be present inside the JAXB object. This is why there is not a
     * <CODE>set</CODE> method for the appearanceOrBackgroundOrColorInterpolator
     * property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * 
     * <pre>
     * getAppearanceOrBackgroundOrColorInterpolator().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(scale) are allowed in the list
     * 
     * @return the list of child objects
     * 
     * 
     * 
     */
    public List<X3DNode> getChildObjects() {

        if (childObjects == null) {
            childObjects = new ArrayList<>();
        }
        return this.childObjects;
    }

    /**
     * Gets the value of the bboxCenter property.
     * 
     * @return possible object is {@link SFVec3f }
     * 
     */
    @Override
    public SFVec3f getBboxCenter() {

        return bboxCenter;
    }

    /**
     * Sets the value of the bboxCenter property.
     * 
     * @param value
     *            allowed object is {@link SFVec3f }
     * 
     */
    @Override
    public void setBboxCenter(SFVec3f value) {

        this.bboxCenter = value;
    }

    /**
     * Gets the value of the bboxSize property.
     * 
     * @return possible object is {@link BoundingBoxSize }
     * 
     */
    @Override
    public BoundingBoxSize getBboxSize() {

        return bboxSize;
    }

    /**
     * Sets the value of the bboxSize property.
     * 
     * @param value
     *            allowed object is {@link BoundingBoxSize }
     * 
     */
    @Override
    public void setBboxSize(BoundingBoxSize value) {

        this.bboxSize = value;
    }

}
